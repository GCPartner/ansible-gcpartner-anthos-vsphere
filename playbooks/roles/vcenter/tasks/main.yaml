---
- name: Create Facts Dir
  ansible.builtin.file:
    path: /etc/ansible/facts.d
    state: directory
    mode: '0755'

- name: Check that the vcenter_auth.fact exisits
  ansible.builtin.stat:
    path: /etc/ansible/facts.d/vcenter_auth.fact
  register: vcenter_fact

- name: Generate vCenter Passwords and save as Facts
  community.general.ini_file:
    path: /etc/ansible/facts.d/vcenter_auth.fact
    section: general
    option: "{{ item.key }}"
    value: "{{ item.value }}"
  with_dict:
  - vcenter_os_password: "{{ lookup('community.general.random_string', min_lower=1, min_upper=1, min_numeric=1, min_special=1, override_special=special_chars, length=16) }}"
  - vcenter_sso_password: "{{ lookup('community.general.random_string', min_lower=1, min_upper=1, min_numeric=1, min_special=1, override_special=special_chars, length=16) }}"
  - vcenter_sso_username: "Administrator@{{ vcenter_domain }}"
  - vcenter_ip_address: "{{ groups['vcenter'][0] }}"
  when:
  - not vcenter_fact.stat.exists

- name: Re-read facts after adding vcenter_auth fact
  ansible.builtin.setup:
    filter: ansible_local

- name: Download vCenter ISO via GCS (This takes a few minutes)
  ansible.builtin.shell:
    chdir: '{{ home_path }}/bootstrap'
    cmd: gcloud auth activate-service-account --key-file={{ home_path }}/bootstrap/gcp_keys/master_sa_key.json
      && gsutil cp gs://{{ object_store_bucket_name }}/{{ vcenter_iso_name}} .
    creates: "{{ home_path }}/bootstrap/{{ vcenter_iso_name}}"
  when: object_store_api == 'gcs'

- name: Download vCenter ISO via S3 (This takes a few minutes)
  amazon.aws.aws_s3:
    bucket: "{{ object_store_bucket_name }}"
    object: "{{ vcenter_iso_name}}"
    dest: "{{ home_path }}/bootstrap/{{ vcenter_iso_name}}"
    mode: get
    s3_url: "{{ s3_url }}"
    aws_access_key: "{{ s3_access_key }}"
    aws_secret_key: "{{ s3_secret_key }}"
    validate_certs: false
  when: object_store_api == 's3'

- name: Mount vCenter ISO to /mnt
  ansible.posix.mount:
    path: /mnt
    src: "{{ home_path }}/bootstrap/{{ vcenter_iso_name}}"
    fstype: iso9660
    state: mounted
    opts: exec

- name: Template out the vcva_install.j2 file to vcva_install.json
  ansible.builtin.template:
    src: vcva_install.j2
    dest: "{{ home_path }}/bootstrap/vcva_install.json"

- name: Check if vcenter_deployed Fact exists
  ansible.builtin.stat:
    path: /etc/ansible/facts.d/vcenter_deployed.fact
  register: vcenter_deployed_fact

- name: Deploy vCenter (This takes a few minutes)
  ansible.builtin.shell:
    chdir: '{{ home_path }}/bootstrap'
    cmd: "/mnt/vcsa-cli-installer/lin64/vcsa-deploy install --accept-eula --no-ssl-certificate-verification {{ home_path }}/bootstrap/vcva_install.json"
  when:
  - not vcenter_deployed_fact.stat.exists
  notify: Create vCenter Deployed Fact

- name: Force all notified handlers to run now
  meta: flush_handlers

- name: Create Datacenter
  community.vmware.vmware_datacenter:
    hostname: "{{ ansible_local['vcenter_auth']['general']['vcenter_ip_address'] }}"
    username: "{{ ansible_local['vcenter_auth']['general']['vcenter_sso_username'] }}"
    password: "{{ ansible_local['vcenter_auth']['general']['vcenter_sso_password'] }}"
    validate_certs: false
    datacenter_name: "{{ vcenter_datacenter_name }}"
    state: present

- name: Create Cluster
  community.vmware.vmware_cluster:
    hostname: "{{ ansible_local['vcenter_auth']['general']['vcenter_ip_address'] }}"
    username: "{{ ansible_local['vcenter_auth']['general']['vcenter_sso_username'] }}"
    password: "{{ ansible_local['vcenter_auth']['general']['vcenter_sso_password'] }}"
    validate_certs: false
    datacenter_name: "{{ vcenter_datacenter_name }}"
    cluster_name: "{{ vcenter_cluster_name }}"

- name: Add ESXi Host to vCenter
  community.vmware.vmware_host:
    hostname: "{{ ansible_local['vcenter_auth']['general']['vcenter_ip_address'] }}"
    username: "{{ ansible_local['vcenter_auth']['general']['vcenter_sso_username'] }}"
    password: "{{ ansible_local['vcenter_auth']['general']['vcenter_sso_password'] }}"
    validate_certs: false
    datacenter: "{{ vcenter_datacenter_name }}"
    cluster: "{{ vcenter_cluster_name }}"
    esxi_hostname: "{{ item.0 }}"
    esxi_username: "{{ esx_username }}"
    esxi_password: "{{ item.1 | b64decode }}"
    fetch_ssl_thumbprint: true
    state: present
  with_together:
        - "{{ groups['esx'] }}"
        - "{{ esx_passwords }}"

- name: Enable HA and VM monitoring without admission control
  community.vmware.vmware_cluster_ha:
    hostname: "{{ ansible_local['vcenter_auth']['general']['vcenter_ip_address'] }}"
    username: "{{ ansible_local['vcenter_auth']['general']['vcenter_sso_username'] }}"
    password: "{{ ansible_local['vcenter_auth']['general']['vcenter_sso_password'] }}"
    validate_certs: False
    datacenter_name: "{{ vcenter_datacenter_name }}"
    cluster_name: "{{ vcenter_cluster_name }}"
    enable: True
    ha_vm_monitoring: vmMonitoringOnly

- name: Enable DRS
  community.vmware.vmware_cluster_drs:
    hostname: "{{ ansible_local['vcenter_auth']['general']['vcenter_ip_address'] }}"
    username: "{{ ansible_local['vcenter_auth']['general']['vcenter_sso_username'] }}"
    password: "{{ ansible_local['vcenter_auth']['general']['vcenter_sso_password'] }}"
    validate_certs: False
    datacenter_name: "{{ vcenter_datacenter_name }}"
    cluster_name: "{{ vcenter_cluster_name }}"
    enable: true

- name: Enable vMotion rule set for all ESXi Host in given Cluster
  community.vmware.vmware_host_firewall_manager:
    hostname: "{{ ansible_local['vcenter_auth']['general']['vcenter_ip_address'] }}"
    username: "{{ ansible_local['vcenter_auth']['general']['vcenter_sso_username'] }}"
    password: "{{ ansible_local['vcenter_auth']['general']['vcenter_sso_password'] }}"
    validate_certs: False
    cluster_name: "{{ vcenter_cluster_name }}"
    rules:
        - name: vMotion
          enabled: True
          allowed_hosts:
            all_ip: True
